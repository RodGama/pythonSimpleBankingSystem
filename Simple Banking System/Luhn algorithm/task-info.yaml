type: edu
files:
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswerException
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False


    def get_credentials(output: str):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD, where D is a digit.')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with correct credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, value_to_return):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10}', output, re.MULTILINE)

        for number in numbers:
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        are_all_inputs_read = True
        return '0'


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, '0'),
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: banking/banking.py
  visible: true
  text: |
    # Write your code here
    import random


    class Bank:
        accounts = dict()
        last_id = 0
        inn = "400000"

        def create_account(self):
            random.seed(self.last_id + 1)
            card_final = str(random.randint(0, 999999999))
            if len(card_final) <= 12:
                card_final = card_final[:0] + "0" + card_final[0:]
            card_number = self.inn + card_final
            while not self.verifica_luhn(card_number):
                card_final = str(random.randint(0, 999999999))
                if len(card_final) <= 12:
                    card_final = card_final[:0] + "0" + card_final[0:]
                card_number = self.inn + card_final

            random.seed(self.last_id + 1)
            _pin = str(random.randint(0, 9999))
            if len(_pin) < 4:
                _pin = _pin[:0] + "0" + _pin[0:]
            pin = _pin
            account = Account(card_number, pin)
            self.accounts[self.last_id + 1] = account
            self.last_id += 1
            print("Your card has been created")
            print(f"Your card number:\n{account.card_number}\nYour card PIN:\n{account.pin}\n")

        def log_in_account(self):
            print("Enter your card number:")
            card = str(input())
            print("Enter your PIN:")
            pin = str(input())

            for account in self.accounts.items():
                if account[1].card_number == card:
                    if account[1].pin == pin:
                        print("You have successfully logged in!")
                        Account.menu(account[1])
                        break
                    else:
                        print("Wrong card number or PIN!")
                        break
                print(card + "|" + pin)
                print(account[1].card_number + "|" + account[1].pin)
            else:
                print("Wrong card number or PIN!")

        def verifica_luhn(card_number):
            card = card_number[0:len(card_number)-1]
            nums = list(card)
            for num in nums:
                if int(num) % 2 == 0:
                    num = int(num) * 2
            for num in nums:
                if int(num) > 10:
                    num = int(num) - 9
            sum_ = 0
            for num in nums:
                sum_ += int(num)
            if sum_ % 10 == 0:
                return True
            else:
                return False


    class Account:
        balance = 0
        card_number = None
        pin = None

        def __init__(self, card_number, pin):
            self.card_number = card_number
            self.pin = pin

        def menu(self):
            while 1 == 1:
                print("1. Balance")
                print("2. Log out")
                print("0. Exit")
                acao = int(input())
                if acao == 1:
                    print("Balance:" + str(self.balance))
                elif acao == 2:
                    print("You have successfully logged out!\n")
                    break
                elif acao == 0:
                    print("Bye")
                    break
            exit()


    def menu():
        while 1 == 1:
            print("1. Create an account")
            print("2. Log into account")
            print("0. Exit")
            acao = int(input())
            if acao == 1:
                Bank.create_account(Bank)
            elif acao == 2:
                Bank.log_in_account(Bank)
            elif acao == 3:
                repr(Bank.accounts)
            elif acao == 0:
                print("Bye")
                break


    menu()
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/592/implement
status: Solved
record: 2
